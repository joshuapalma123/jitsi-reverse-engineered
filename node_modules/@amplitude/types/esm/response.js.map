{"version":3,"file":"response.js","sourceRoot":"","sources":["../src/response.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAuClC,MAAM,CAAC,IAAM,iBAAiB,GAAG,UAAC,IAAS;;IACzC,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QAC5B,OAAO,IAAI,CAAC;KACb;IAED,IAAM,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9C,IAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC;IAE7B,QAAQ,MAAM,EAAE;QACd,KAAK,MAAM,CAAC,OAAO;YACjB,OAAO;gBACL,MAAM,QAAA;gBACN,UAAU,YAAA;gBACV,IAAI,EAAE;oBACJ,cAAc,EAAE,IAAI,CAAC,eAAe;oBACpC,gBAAgB,EAAE,IAAI,CAAC,kBAAkB;oBACzC,gBAAgB,EAAE,IAAI,CAAC,kBAAkB;iBAC1C;aACF,CAAC;QAEJ,KAAK,MAAM,CAAC,OAAO;YACjB,OAAO;gBACL,MAAM,QAAA;gBACN,UAAU,YAAA;gBACV,IAAI,EAAE;oBACJ,KAAK,QAAE,IAAI,CAAC,KAAK,mCAAI,EAAE;oBACvB,YAAY,QAAE,IAAI,CAAC,aAAa,mCAAI,IAAI;oBACxC,uBAAuB,QAAE,IAAI,CAAC,0BAA0B,mCAAI,EAAE;oBAC9D,uBAAuB,QAAE,IAAI,CAAC,0BAA0B,mCAAI,EAAE;iBAC/D;aACF,CAAC;QACJ,KAAK,MAAM,CAAC,eAAe;YACzB,OAAO;gBACL,MAAM,QAAA;gBACN,UAAU,YAAA;gBACV,IAAI,EAAE;oBACJ,KAAK,QAAE,IAAI,CAAC,KAAK,mCAAI,EAAE;iBACxB;aACF,CAAC;QACJ,KAAK,MAAM,CAAC,SAAS;YACnB,OAAO;gBACL,MAAM,QAAA;gBACN,UAAU,YAAA;gBACV,IAAI,EAAE;oBACJ,KAAK,QAAE,IAAI,CAAC,KAAK,mCAAI,EAAE;oBACvB,YAAY,EAAE,IAAI,CAAC,aAAa;oBAChC,gBAAgB,QAAE,IAAI,CAAC,iBAAiB,mCAAI,EAAE;oBAC9C,cAAc,QAAE,IAAI,CAAC,eAAe,mCAAI,EAAE;oBAC1C,yBAAyB,QAAE,IAAI,CAAC,4BAA4B,mCAAI,EAAE;oBAClE,uBAAuB,QAAE,IAAI,CAAC,0BAA0B,mCAAI,EAAE;oBAC9D,eAAe,QAAE,IAAI,CAAC,gBAAgB,mCAAI,EAAE;iBAC7C;aACF,CAAC;QACJ;YACE,OAAO;gBACL,MAAM,QAAA;gBACN,UAAU,YAAA;aACX,CAAC;KACL;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,wBAAwB,GAAG,UAAC,OAAwB;IAC/D,IAAM,UAAU,GAAG,OAAO,CAAC,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC;IAC7E,IAAM,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;IAE/C,OAAO;QACL,MAAM,QAAA;QACN,UAAU,YAAA;KACX,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { Status } from './status';\nimport { IncomingMessage } from 'http';\n\n/** A response body for a request that returned 200 (successful). */\nexport type SuccessBody = {\n  eventsIngested: number;\n  payloadSizeBytes: number;\n  serverUploadTime: number;\n};\n\n/** A response body for a request that returned 413 (invalid request). */\nexport type InvalidRequestBody = {\n  error: string;\n  missingField: string | null;\n  eventsWithInvalidFields: { [eventField: string]: Array<number> };\n  eventsWithMissingFields: { [eventField: string]: Array<number> };\n};\n\n/** A response body for a request that returned 413 (payload too large). */\nexport type PayloadTooLargeBody = {\n  error: string;\n};\n\n/** A response body for a request that returned 429 (rate limit). */\nexport type RateLimitBody = {\n  error: string;\n  epsThreshold: number;\n  throttledDevices: { [deviceId: string]: number };\n  throttledUsers: { [userId: string]: number };\n  exceededDailyQuotaDevices: { [deviceId: string]: number };\n  exceededDailyQuotaUsers: { [userId: string]: number };\n  throttledEvents: Array<number>;\n};\n\nexport type StatusWithResponseBody = Status.Invalid | Status.PayloadTooLarge | Status.RateLimit | Status.Success;\n\n/** Represents additional data that is provided by the http v2 API */\nexport type ResponseBody = SuccessBody | InvalidRequestBody | PayloadTooLargeBody | RateLimitBody;\n\nexport const mapJSONToResponse = (json: any): Response | null => {\n  if (typeof json !== 'object') {\n    return null;\n  }\n\n  const status = Status.fromHttpCode(json.code);\n  const statusCode = json.code;\n\n  switch (status) {\n    case Status.Success:\n      return {\n        status,\n        statusCode,\n        body: {\n          eventsIngested: json.events_ingested,\n          payloadSizeBytes: json.payload_size_bytes,\n          serverUploadTime: json.server_upload_time,\n        },\n      };\n\n    case Status.Invalid:\n      return {\n        status,\n        statusCode,\n        body: {\n          error: json.error ?? '',\n          missingField: json.missing_field ?? null,\n          eventsWithInvalidFields: json.events_with_invalid_fields ?? {},\n          eventsWithMissingFields: json.events_with_missing_fields ?? {},\n        },\n      };\n    case Status.PayloadTooLarge:\n      return {\n        status,\n        statusCode,\n        body: {\n          error: json.error ?? '',\n        },\n      };\n    case Status.RateLimit:\n      return {\n        status,\n        statusCode,\n        body: {\n          error: json.error ?? '',\n          epsThreshold: json.eps_threshold,\n          throttledDevices: json.throttled_devices ?? {},\n          throttledUsers: json.throttled_users ?? {},\n          exceededDailyQuotaDevices: json.exceeded_daily_quota_devices ?? {},\n          exceededDailyQuotaUsers: json.exceeded_daily_quota_users ?? {},\n          throttledEvents: json.throttled_events ?? [],\n        },\n      };\n    default:\n      return {\n        status,\n        statusCode,\n      };\n  }\n};\n\nexport const mapHttpMessageToResponse = (httpRes: IncomingMessage): Response => {\n  const statusCode = httpRes.statusCode === undefined ? 0 : httpRes.statusCode;\n  const status = Status.fromHttpCode(statusCode);\n\n  return {\n    status,\n    statusCode,\n  };\n};\n\n/** JSDoc */\nexport type Response =\n  | {\n      status: Status.Success;\n      statusCode: number;\n      body?: SuccessBody;\n    }\n  | {\n      status: Status.Invalid;\n      statusCode: number;\n      body?: InvalidRequestBody;\n    }\n  | {\n      status: Status.PayloadTooLarge;\n      statusCode: number;\n      body?: PayloadTooLargeBody;\n    }\n  | {\n      status: Status.RateLimit;\n      statusCode: number;\n      body?: RateLimitBody;\n    }\n  | {\n      status: Exclude<Status, StatusWithResponseBody>;\n      statusCode: number;\n    };\n"]}