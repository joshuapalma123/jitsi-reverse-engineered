import { Status } from './status';
import { IncomingMessage } from 'http';
/** A response body for a request that returned 200 (successful). */
export declare type SuccessBody = {
    eventsIngested: number;
    payloadSizeBytes: number;
    serverUploadTime: number;
};
/** A response body for a request that returned 413 (invalid request). */
export declare type InvalidRequestBody = {
    error: string;
    missingField: string | null;
    eventsWithInvalidFields: {
        [eventField: string]: Array<number>;
    };
    eventsWithMissingFields: {
        [eventField: string]: Array<number>;
    };
};
/** A response body for a request that returned 413 (payload too large). */
export declare type PayloadTooLargeBody = {
    error: string;
};
/** A response body for a request that returned 429 (rate limit). */
export declare type RateLimitBody = {
    error: string;
    epsThreshold: number;
    throttledDevices: {
        [deviceId: string]: number;
    };
    throttledUsers: {
        [userId: string]: number;
    };
    exceededDailyQuotaDevices: {
        [deviceId: string]: number;
    };
    exceededDailyQuotaUsers: {
        [userId: string]: number;
    };
    throttledEvents: Array<number>;
};
export declare type StatusWithResponseBody = Status.Invalid | Status.PayloadTooLarge | Status.RateLimit | Status.Success;
/** Represents additional data that is provided by the http v2 API */
export declare type ResponseBody = SuccessBody | InvalidRequestBody | PayloadTooLargeBody | RateLimitBody;
export declare const mapJSONToResponse: (json: any) => Response | null;
export declare const mapHttpMessageToResponse: (httpRes: IncomingMessage) => Response;
/** JSDoc */
export declare type Response = {
    status: Status.Success;
    statusCode: number;
    body?: SuccessBody;
} | {
    status: Status.Invalid;
    statusCode: number;
    body?: InvalidRequestBody;
} | {
    status: Status.PayloadTooLarge;
    statusCode: number;
    body?: PayloadTooLargeBody;
} | {
    status: Status.RateLimit;
    statusCode: number;
    body?: RateLimitBody;
} | {
    status: Exclude<Status, StatusWithResponseBody>;
    statusCode: number;
};
//# sourceMappingURL=response.d.ts.map