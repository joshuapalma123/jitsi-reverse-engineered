import { Status } from '@amplitude/types';
/**
 * Collects the invalid event indices off a HTTP API v2 response
 * and returns them in increasing order.
 *
 * @param response A Response from sending an event payload
 * @returns An concatenated array of indices
 */
export var collectInvalidEventIndices = function (response) {
    var invalidEventIndices = new Set();
    if (response.status === Status.Invalid && response.body) {
        var _a = response.body, eventsWithInvalidFields_1 = _a.eventsWithInvalidFields, eventsWithMissingFields_1 = _a.eventsWithMissingFields;
        Object.keys(eventsWithInvalidFields_1).forEach(function (field) {
            var _a;
            var eventIndices = (_a = eventsWithInvalidFields_1[field]) !== null && _a !== void 0 ? _a : [];
            eventIndices.forEach(function (index) {
                invalidEventIndices.add(index);
            });
        });
        Object.keys(eventsWithMissingFields_1).forEach(function (field) {
            var _a;
            var eventIndices = (_a = eventsWithMissingFields_1[field]) !== null && _a !== void 0 ? _a : [];
            eventIndices.forEach(function (index) {
                invalidEventIndices.add(index);
            });
        });
    }
    return Array.from(invalidEventIndices).sort();
};
//# sourceMappingURL=response.js.map