{"version":3,"file":"logger.js","sourceRoot":"","sources":["../src/logger.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAC5C,OAAO,EAAE,eAAe,EAAE,MAAM,QAAQ,CAAC;AAEzC,iCAAiC;AACjC,IAAM,MAAM,GAAG,eAAe,EAAE,CAAC;AAEjC,iCAAiC;AACjC,IAAM,MAAM,GAAG,mBAAmB,CAAC;AAEnC,YAAY;AACZ;IAIE,YAAY;IACZ;QACE,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;IACrB,CAAC;IAED,YAAY;IACL,wBAAO,GAAd;QACE,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;IACrB,CAAC;IAED,YAAY;IACL,uBAAM,GAAb,UAAc,QAAkC;QAAlC,yBAAA,EAAA,WAAqB,QAAQ,CAAC,IAAI;QAC9C,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IAED,YAAY;IACL,oBAAG,GAAV;QAAW,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QACvB,IAAI,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,OAAO,EAAE;YACrC,OAAO;SACR;QACD,MAAM,CAAC,OAAO,CAAC,GAAG,CAAI,MAAM,eAAU,IAAI,CAAC,IAAI,CAAC,GAAG,CAAG,CAAC,CAAC,CAAC,iCAAiC;IAC5F,CAAC;IAED,YAAY;IACL,qBAAI,GAAX;QAAY,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QACxB,IAAI,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,IAAI,EAAE;YAClC,OAAO;SACR;QACD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAI,MAAM,gBAAW,IAAI,CAAC,IAAI,CAAC,GAAG,CAAG,CAAC,CAAC,CAAC,iCAAiC;IAC9F,CAAC;IAED,YAAY;IACL,sBAAK,GAAZ;QAAa,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QACzB,IAAI,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,KAAK,EAAE;YACnC,OAAO;SACR;QACD,MAAM,CAAC,OAAO,CAAC,KAAK,CAAI,MAAM,iBAAY,IAAI,CAAC,IAAI,CAAC,GAAG,CAAG,CAAC,CAAC,CAAC,iCAAiC;IAChG,CAAC;IACH,aAAC;AAAD,CAAC,AA1CD,IA0CC;AAED,6GAA6G;AAC7G,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,IAAI,EAAE,CAAC;AAClD,IAAM,MAAM,GAAI,MAAM,CAAC,aAAa,CAAC,MAAiB,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC,CAAC;AAEvG,OAAO,EAAE,MAAM,EAAE,CAAC","sourcesContent":["import { LogLevel } from '@amplitude/types';\nimport { getGlobalObject } from './misc';\n\n// TODO: Type the global constant\nconst global = getGlobalObject();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Amplitude Logger ';\n\n/** JSDoc */\nclass Logger {\n  /** JSDoc */\n  private _logLevel: LogLevel;\n\n  /** JSDoc */\n  public constructor() {\n    this._logLevel = 0;\n  }\n\n  /** JSDoc */\n  public disable(): void {\n    this._logLevel = 0;\n  }\n\n  /** JSDoc */\n  public enable(logLevel: LogLevel = LogLevel.Warn): void {\n    this._logLevel = logLevel;\n  }\n\n  /** JSDoc */\n  public log(...args: any[]): void {\n    if (this._logLevel < LogLevel.Verbose) {\n      return;\n    }\n    global.console.log(`${PREFIX}[Log]: ${args.join(' ')}`); // tslint:disable-line:no-console\n  }\n\n  /** JSDoc */\n  public warn(...args: any[]): void {\n    if (this._logLevel < LogLevel.Warn) {\n      return;\n    }\n    global.console.warn(`${PREFIX}[Warn]: ${args.join(' ')}`); // tslint:disable-line:no-console\n  }\n\n  /** JSDoc */\n  public error(...args: any[]): void {\n    if (this._logLevel < LogLevel.Error) {\n      return;\n    }\n    global.console.error(`${PREFIX}[Error]: ${args.join(' ')}`); // tslint:disable-line:no-console\n  }\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @amplitude/utils are being used\nglobal.__AMPLITUDE__ = global.__AMPLITUDE__ || {};\nconst logger = (global.__AMPLITUDE__.logger as Logger) || (global.__AMPLITUDE__.logger = new Logger());\n\nexport { logger };\n"]}